apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: kubeadm-control-plane-0.1.0
spec:
  template:
    spec:
      kubeadmConfigSpec:
        format: ignition # remove when using Ubuntu
        clusterConfiguration:
          apiServer:
            extraArgs:
              # CA certificate for validating API clients.
              client-ca-file: /etc/kubernetes/pki/ca.crt # enable X509 Client Certs Auth
              # TLS certificates for HTTPS serving.
              tls-cert-file: /etc/kubernetes/pki/apiserver.crt
              tls-private-key-file: /etc/kubernetes/pki/apiserver.key
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              tls-min-version: VersionTLS12
              # Required for kubelet communication.
              kubelet-client-certificate: /etc/kubernetes/pki/apiserver-kubelet-client.crt
              kubelet-client-key: /etc/kubernetes/pki/apiserver-kubelet-client.key
              # Secure communication to etcd servers.
              etcd-cafile: /etc/kubernetes/pki/etcd/ca.crt
              etcd-certfile: /etc/kubernetes/pki/etcd/server.crt
              etcd-keyfile: /etc/kubernetes/pki/etcd/server.key
              # Required to validate service account tokens created by controller manager.
              service-account-lookup: "true"
              service-account-key-file: /etc/kubernetes/pki/sa.pub
              # Required for aggregation layer
              requestheader-client-ca-file: /etc/kubernetes/pki/front-proxy-ca.crt
              proxy-client-key-file: /etc/kubernetes/pki/front-proxy-client.key
              proxy-client-cert-file: /etc/kubernetes/pki/front-proxy-client.crt
              requestheader-allowed-names: front-proxy-client
              requestheader-extra-headers-prefix: X-Remote-Extra-
              requestheader-group-headers: X-Remote-Group
              requestheader-username-headers: X-Remote-User
              enable-aggregator-routing: "true"
              # etcd Secret Encrytion
              encryption-provider-config: /etc/kubernetes/encryption-provider.yaml
              # Additional Configuration
              cloud-provider: external
              authorization-mode: "Node,RBAC"
              kubelet-preferred-address-types: ExternalIP,Hostname,InternalDNS,ExternalDNS
              profiling: "false"
              enable-bootstrap-token-auth: "true"
              default-not-ready-toleration-seconds: "45"
              default-unreachable-toleration-seconds: "45"
            extraVolumes:
              - name: encryption-provider
                hostPath: /etc/kubernetes/encryption-provider.yaml
                mountPath: /etc/kubernetes/encryption-provider.yaml
          controllerManager:
            extraArgs:
              cloud-provider: external
              cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt
              cluster-signing-key-file: /etc/kubernetes/pki/ca.key
              cluster-signing-duration: 6h0m0s
              terminated-pod-gc-threshold: "10"
              profiling: "false"
              use-service-account-credentials: "true"
              service-account-private-key-file: /etc/kubernetes/pki/sa.key
              root-ca-file: /etc/kubernetes/pki/ca.crt
              requestheader-client-ca-file: /etc/kubernetes/pki/front-proxy-ca.crt
              kubeconfig: /etc/kubernetes/controller-manager.conf
              authentication-kubeconfig: /etc/kubernetes/controller-manager.conf
              authorization-kubeconfig: /etc/kubernetes/controller-manager.conf
              bind-address: "0.0.0.0"
              secure-port: "10257"
              allocate-node-cidrs: "true"
          scheduler:
            extraArgs:
              profiling: "false"
              kubeconfig: /etc/kubernetes/scheduler.conf
              bind-address: "0.0.0.0"
              secure-port: "10259"
          etcd:
            local:
              dataDir: /var/lib/etcd
              extraArgs:
                cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
                tls-min-version: TLS1.2
                cert-file: /etc/kubernetes/pki/etcd/server.crt
                key-file: /etc/kubernetes/pki/etcd/server.key
                client-cert-auth: "true"
                auto-tls: "false"
                peer-client-cert-auth: "true"
                peer-auto-tls: "false"
                trusted-ca-file: /etc/kubernetes/pki/etcd/ca.crt
        initConfiguration:
          nodeRegistration:
            kubeletExtraArgs:
              cloud-provider: external
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
              tls-min-version: VersionTLS12
              kubeconfig: /etc/kubernetes/kubelet.conf
              authentication-token-webhook: "true"
              authorization-mode: Webhook
              anonymous-auth: "false"
              read-only-port: "0"
              event-qps: "5"
              rotate-server-certificates: "true"
              max-pods: "110"
              resolv-conf: /etc/kubernetes/resolv.conf
        joinConfiguration:
          nodeRegistration:
            kubeletExtraArgs:
              cloud-provider: external
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
              kubeconfig: /etc/kubernetes/kubelet.conf
              authentication-token-webhook: "true"
              authorization-mode: Webhook
              anonymous-auth: "false"
              read-only-port: "0"
              event-qps: "5"
              rotate-server-certificates: "true"
              max-pods: "110"
              resolv-conf: /etc/kubernetes/resolv.conf
        files:
          - path: /etc/kubernetes/encryption-provider.yaml
            contentFrom:
              secret:
                key: encryptionconfig.yaml
                name: encryption-config
            owner: "root:root"
            permissions: "0600"
          - path: /etc/kubernetes/resolv.conf
            owner: "root:root"
            permissions: "0744"
            content: |
              nameserver 1.1.1.1
              nameserver 1.0.0.1
              nameserver 2606:4700:4700::1111
